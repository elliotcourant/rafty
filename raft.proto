syntax = "proto3";

package rafty;

enum LogType {
    // Command is applied to the user's FSM.
    Command = 0;

    // Noop is used to assert leadership.
    Noop = 1;

    // Barrier is used to ensure all preceding operations have been
    // applied to the FSM. It is similar to LogNoop, but instead of returning
    // once committed, it only returns once the FSM manager acks it. Otherwise
    // it is possible there are operations committed but not yet applied to
    // the FSM.
    Barrier = 2;

    // Configuration establishes a membership change configuration. It is
    // created when a server is added, removed, promoted, etc. Only used
    // when protocol version 1 or greater is in use.
    Configuration = 3;
}

message Log {
    // Index of the log entry.
    uint64 Index = 1;

    // Election term of the log entry.
    uint64 Term = 2;

    // Type of the entry.
    LogType Type = 3;

    // Raw entry data.
    bytes Data = 4;
}

message AppendEntriesRequest {
    // Provide the current term and leader for validation.
    uint64 Term = 1;
    bytes Leader = 2;

    // Previous entries for integrity checking.
    uint64 PreviousLogEntry = 3;
    uint64 PreviousLogTerm = 4;

    // New entries to commit.
    repeated Log Entries = 6;

    // Commit index of the leader.
    uint64 LeaderCommitIndex = 7;
}

message AppendEntriesResponse {
    // Newer term if leader is out of date.
    uint64 Term = 1;

    // Last log is a hint to help accelerate rebuilding slow nodes.
    uint64 LastLog = 3;

    // We may not succeed if we have a conflicting entry.
    bool Success = 4;

    // There are scenarios where this request didn't succeed
    // but there's no need to wait/back-off the next attempt.
    bool NoRetryBackOff = 5;
}

message RequestVoteRequest {
    // Provide the term and our ID.
    uint64 Term = 1;
    bytes Candidate = 2;

    // Ensure safety.
    uint64 LastLogIndex = 3;
    uint64 LastLogTerm = 4;
}

message RequestVoteResponse {
    // Newer term if leader is out of date.
    uint64 Term = 1;

    // Peers is deprecated, but required by servers that only understand
    // protocol version 0. This is not populated in protocol version 2
    // and later.
    bytes Peers = 2;

    // Is the vote granted.
    bool Granted = 3;
}



service RaftService {
    rpc appendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
    rpc requestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
}